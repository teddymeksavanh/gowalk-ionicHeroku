{"version":3,"sources":["../../../src/fusioncharts/fusioncharts.service.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,uBAAA,EAAwB,MAAO,6BAAA,CAA8B;AAGtE;IAgCI,6BAAoB,uBAAgD;QAAhD,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChE,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,0BAA0B,EAAE,CAAC,CAAC,CAAC;YACpD,mBAAmB,CAAC,uBAAuB,CAAC,uBAAuB,CAAC,IAAI,EAAE,uBAAuB,CAAC,OAAO,CAAC,CAAC;QAC/G,CAAC;IACL,CAAC;IAjCa,+CAA2B,GAAzC;QACI,MAAM,CAAC,mBAAmB,CAAC,wBAAwB,CAAC;IACxD,CAAC;IAEa,8CAA0B,GAAxC;QACI,MAAM,CAAC,CAAC,CAAC,mBAAmB,CAAC,wBAAwB,CAAC;IAC1D,CAAC;IAEa,2CAAuB,GAArC,UAAsC,IAAS,EAAE,OAAc;QAC3D,IAAI,YAAiB,CAAC;QACtB,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,kBAAkB,EAAE,KAAK,YAAY,CAAC,CAAC,CAAC;YAChF,YAAY,GAAG,IAAI,CAAC;QACxB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,oEAAoE;YACpE,YAAY,GAAG,IAAI,EAAE,CAAC;QAC1B,CAAC;QAED,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;YACnB,MAAM,CAAC,YAAY,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,uDAAuD;QACvD,EAAE,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;YACvB,YAAY,CAAC,OAAO,CAAC,gBAAgB,GAAG,UAAU,CAAC;QACvD,CAAC;QAED,mBAAmB,CAAC,wBAAwB,GAAG,YAAY,CAAC;IAChE,CAAC;IAQD,qDAAuB,GAAvB,UAAwB,WAAgB;QACpC,IAAM,cAAc,GAAG,mBAAmB,CAAC,wBAAwB,CAAC;QACpE,MAAM,CAAC,IAAI,cAAc,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;IAQL,0BAAC;AAAD,CAjDA,AAiDC;;AAhDkB,4CAAwB,GAAQ,IAAI,CAAC;AAyCjD,8BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,kCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,uBAAuB,GAAG;CAChC,EAF6F,CAE7F,CAAC","file":"fusioncharts.service.js","sourceRoot":"","sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { FusionChartsCoreService } from './fusioncharts.core.service';\n\n\nexport class FusionChartsService {\n    private static resolvedFusionChartsCore: any = null;\n\n    public static getResolvedFusionChartsCore() {\n        return FusionChartsService.resolvedFusionChartsCore;\n    }\n\n    public static isFusionChartsCoreResolved() {\n        return !!FusionChartsService.resolvedFusionChartsCore;\n    }\n\n    public static resolveFusionChartsCore(core: any, modules: any[]) {\n        let resolvedCore: any;\n        if (core && core.getCurrentRenderer && core.getCurrentRenderer() === 'javascript') {\n            resolvedCore = core;\n        } else {\n            // Otherwise the core should be a factory that provides the fc core.\n            resolvedCore = core();\n        }\n\n        modules.forEach((module) => {\n            module(resolvedCore);\n        });\n\n        // Fix the black pie-chart rendering in Safari browser.\n        if (resolvedCore.options) {\n            resolvedCore.options.SVGDefinitionURL = 'absolute';\n        }\n\n        FusionChartsService.resolvedFusionChartsCore = resolvedCore;\n    }\n\n    constructor(private fusionChartsCoreService: FusionChartsCoreService) {\n        if (!FusionChartsService.isFusionChartsCoreResolved()) {\n            FusionChartsService.resolveFusionChartsCore(fusionChartsCoreService.core, fusionChartsCoreService.modules);\n        }\n    }\n\n    newFusionChartsInstance(chartConfig: any) {\n        const resolvedFCCore = FusionChartsService.resolvedFusionChartsCore;\n        return new resolvedFCCore(chartConfig);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: FusionChartsCoreService, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}